// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  password      String?
  active        Boolean   @default(true)

  notifications      Notification[]
  boards             Board[]
  tags               Tag[]
  verificationToken  VerificationToken[]
  passwordResetToken PasswordResetToken[]
  subscriptions      Subscription[]
  logins             Login[]

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@index(fields: [name, email])
  @@map("users")
}

model Login {
  id      String   @id @default(cuid())
  country String?
  valid   DateTime
  userId  String   @map(name: "user_id")
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@map("logins")
}

model Subscription {
  id       String  @id @default(uuid())
  price    Int?
  currency String?
  active   Boolean @default(false)

  tier Tier @default(STARTER)

  priceId              String?
  customerId           String?
  currentPeriodEndDate DateTime?
  subscritiptionId     String?   @unique
  userId               String    @map(name: "user_id")
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@index([customerId])
  @@map("subscriptions")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@unique([email, token])
  @@index([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@unique([email, token])
  @@index([email, token])
  @@map("password_reset_tokens")
}

model Board {
  id      String   @id @default(uuid())
  name    String
  columns Column[]

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@index([userId])
  @@map("boards")
}

model Column {
  id      String @id @default(uuid())
  name    String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String
  tasks   Task[]
  order   Int    @default(0)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@index([boardId])
  @@map("columns")
}

model Task {
  id          String  @id @default(uuid())
  name        String
  description String?
  order       Int     @default(0)
  columnId    String
  column      Column  @relation(fields: [columnId], references: [id], onDelete: Cascade)
  tags        Tag[]

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@index([columnId])
  @@map("tasks")
}

model Tag {
  id    String @id @default(uuid())
  name  String
  color String

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tasks Task[]

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@index([userId])
  @@map("tags")
}

model Notification {
  id           String @id @default(uuid())
  pathname     String
  notification String
  userId       String @map(name: "user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@index([userId, pathname])
  @@map("notifications")
}

enum Tier {
  STARTER
  BASIC
  PRO
}
