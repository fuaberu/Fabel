// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  password      String?
  active        Boolean   @default(true)

  notifications      Notification[]
  boards             UserOnBoard[]
  Task               Task[]
  verificationToken  VerificationToken[]
  passwordResetToken PasswordResetToken[]
  subscriptions      Subscription[]
  logins             Login[]
  pages              Page[]
  activities    ProjectActivity[]

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@index(fields: [name, email])
  @@map("users")
}

model Login {
  id      String   @id @default(cuid())
  country String?
  valid   DateTime
  userId  String   @map(name: "user_id")
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@map("logins")
}

model Subscription {
  id       String  @id @default(uuid())
  price    Int?
  currency String?
  active   Boolean @default(false)

  tier Tier @default(STARTER)

  priceId              String?
  customerId           String?
  currentPeriodEndDate DateTime?
  subscritiptionId     String?   @unique
  userId               String    @map(name: "user_id")
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@index([customerId])
  @@map("subscriptions")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@unique([email, token])
  @@index([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@unique([email, token])
  @@index([email, token])
  @@map("password_reset_tokens")
}

model Board {
  id   String       @id @default(uuid())
  name String
  icon ProjectIcons @default(KANBAN)

  defaultPage ProjectPages @default(BOARD) @map("default_page")

  columns         Column[]
  tags            Tag[]
  users           UserOnBoard[]
  activities ProjectActivity[]

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@map("boards")
}

model UserOnBoard {
  id String @id @default(uuid())

  role Role @default(USER)

  userId  String @map(name: "user_id")
  user    User   @relation(fields: [userId], references: [id])
  boardId String @map(name: "board_id")
  board   Board  @relation(fields: [boardId], references: [id])

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@map("users_on_boards")
}

model Column {
  id          String     @id @default(uuid())
  name        String
  description String?
  board       Board      @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId     String
  tasks       Task[]
  order       Float      @default(1.0)
  taskStatus  TaskStatus @default(NONE) @map(name: "task_status")

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@index([boardId])
  @@map("columns")
}

model Task {
  id            String    @id @default(uuid())
  name          String
  description   String?
  order         Float     @default(1.0)
  startDate     DateTime? @map("start_date")
  dueDate       DateTime? @map("due_date")
  completedDate DateTime? @map("completed_date")

  users    User[]
  columnId String
  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  tags     Tag[]

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@index([columnId])
  @@map("tasks")
}

model ProjectActivity {
  id          String @id @default(uuid())
  description String

  entityId String              @map("entity_id")
  
  type     ProjectActivityType

  projectId String @map("project_id")
  project   Board  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String @map(name: "user_id")
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@map("project_activities")
}

model Tag {
  id    String   @id @default(uuid())
  name  String
  color TagColor

  tasks Task[]

  boardId String @map("board_id")
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@map("tags")
}

model Page {
  id           String  @id @default(uuid())
  name         String
  pathName     String  @default("") @map("path_name")
  visits       Visit[]
  content      String?
  previewImage String? @map("preview_image")

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@map("pages")
}

model Visit {
  id             String  @id @default(uuid())
  city           String?
  country        String?
  browser        String?
  browserVersion String? @map("browser_version")
  deviceModel    String? @map("device_model")
  deviceType     String? @map("device_type")
  deviceVendor   String? @map("device_vendor")
  isBot          String? @map("is_bot")

  pageId String @map(name: "page_id")
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@map("visit")
}

model Notification {
  id           String @id @default(uuid())
  pathname     String
  notification String
  userId       String @map(name: "user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")

  @@index([userId, pathname])
  @@map("notifications")
}

enum ProjectActivityType {
  BOARD
  COLUMN
  TASK
}

enum ProjectIcons {
  KANBAN
  CALENDAR
  SYRINGE
  LAPTOP
}

enum ProjectPages {
  BOARD
  CALENDAR
}

enum TagColor {
  GRAY
  BLUE
  ORANGE
  ROSE
  GREEN
  PURPLE
}

enum TaskStatus {
  NONE
  NEW
  PRIORITIZE
  PROGRESS
  HOLD
  DONE
}

enum Role {
  ADMIN
  USER
}

enum Tier {
  TRIAL
  STARTER
  BASIC
  PRO
}
